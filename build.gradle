/*plugins {
    id 'maven'
    id "com.jfrog.bintray" version "1.2"
    id "com.jfrog.artifactory" version "3.1.1"
}*/

apply plugin: 'maven-publish'
apply plugin: "com.jfrog.bintray"
apply plugin: "com.jfrog.artifactory"
apply plugin: 'nebula.optional-base'
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.2"
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:3.1.1"
        classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:3.0.3'
    }
}

buildDir = "../public/${moduleName}"

ext {
    distBuildId = System.currentTimeMillis()
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    repositories {
        jcenter()
    }
    idea {
        module {
            excludeDirs = []
            [".idea", ".gradle", '.settings'].each {
                excludeDirs << file("$it")
            }
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.debug = "on"
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

tasks.withType(Javadoc) {
    options.encoding = "UTF-8"
    options.charSet = "UTF-8"
}

task cleanAll << {
    println "Clean project.."
    delete buildDir
}

jar {
    manifest {
        attributes("Specification-Title": moduleName, "Specification-Version": version)
        attributes("Implementation-Title": moduleName, "Implementation-Version": "$version-$distBuildId")
    }
}

task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allJava
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourceJar
        }
    }
    repositories{
        maven{
            url new File("../mvnrepo").toURI()
        }
    }
}
Properties properties = new Properties()
properties.load(new FileInputStream("${System.properties['user.home']}/bintray.properties"))
artifactory {
    contextUrl = 'http://oss.jfrog.org/artifactory'
    resolve {
        repository {
            repoKey = 'libs-release'
        }
    }
    publish {
        repository {
            repoKey = 'oss-snapshot-local' //The Artifactory repository key to publish to
            username =  properties.getProperty("bintray.user")
            password = properties.getProperty("bintray.apikey")
            maven = true
        }
        defaults {
            publications('mavenJava')
            publishArtifacts = true
        }
    }
}
bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")
    publications('mavenJava')
    pkg {
        repo = "maven"
        name = "java-utils"	//发布到JCenter上的项目名字
        websiteUrl = "http://wujc.cn"
        licenses = ["Apache-2.0"]
        publish = true
    }
}

dependencies {

    /* OMS */
    compile "org.jasig.cas.client:cas-client-core:3.2.1"
    compile "org.apache.shiro:shiro-cas:${shiroVersion}", optional
    compile "org.apache.shiro:shiro-spring:${shiroVersion}", optional

    /* J2EE */
    compile "javax.servlet:javax.servlet-api:3.1.0", optional
    compile "javax.servlet.jsp:jsp-api:2.2", optional

    /* spring */
    compile("org.springframework:spring-context-support:${springVersion}")
    compile("org.springframework:spring-orm:${springVersion}")
    compile("org.springframework:spring-tx:${springVersion}")
    compile("org.springframework:spring-webmvc:${springVersion}")
    compile("org.springframework:spring-test:${springVersion}", optional)
    compile("org.springframework.data:spring-data-jpa:${springDataJpaVersion}", optional)

    /* ORM */
    compile("org.hibernate:hibernate-entitymanager:${hibernateVersion}")
    compile("org.hibernate:hibernate-validator:${hibernateValidatorVersion}")

    /* Excel & PDF */
    compile "org.apache.poi:poi:3.9", optional
    compile "org.apache.poi:poi-ooxml:3.9", optional
    compile "com.itextpdf:itextpdf:5.5.7", optional
    compile "com.itextpdf:itext-asian:5.2.0", optional
    compile "org.xhtmlrenderer:flying-saucer-pdf-itext5:9.0.6", optional

    /* commons */
    compile("org.apache.commons:commons-lang3:3.3.2", optional)
    compile("org.apache.commons:commons-pool2:2.3", optional)
    compile("commons-codec:commons-codec:1.9", optional)
    compile "commons-collections:commons-collections:3.2.1", optional
    compile("commons-beanutils:commons-beanutils:1.9.0", optional)
    compile "commons-io:commons-io:2.4", optional
    compile "com.google.guava:guava:18.0", optional

    compile("org.slf4j:slf4j-api:1.7.7")

    compile "org.aspectj:aspectjrt:1.8.0"
    compile("net.sf.ehcache:ehcache-core:2.6.9")

    /** Others */
    compile "org.freemarker:freemarker:2.3.20"
    compile("net.sf.ehcache:ehcache-core:2.6.9", optional)
    compile("redis.clients:jedis:2.6.2", optional)
    compile "com.fasterxml.jackson.core:jackson-databind:2.4.3"
}